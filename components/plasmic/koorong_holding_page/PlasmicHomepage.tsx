// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 98tdXdGknXVLezmWEtk2yz
// Component: 11fQZRO2Y0J

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_koorong_holding_page.module.css"; // plasmic-import: 98tdXdGknXVLezmWEtk2yz/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 11fQZRO2Y0J/css

import KoorongLogosvgIcon from "./icons/PlasmicIcon__KoorongLogosvg"; // plasmic-import: marF4Inw4e/icon
import FacebooksvgIcon from "./icons/PlasmicIcon__Facebooksvg"; // plasmic-import: h_5Buau8wR/icon
import InstagramsvgIcon from "./icons/PlasmicIcon__Instagramsvg"; // plasmic-import: elhRjNNrB1/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  headerSection?: p.Flex<"section">;
  contentSection?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  countdownWrapper?: p.Flex<"div">;
  body?: p.Flex<"div">;
  subSection?: p.Flex<"section">;
  h2?: p.Flex<"h2">;
  footer?: p.Flex<"section">;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"headerSection"}
            data-plasmic-override={overrides.headerSection}
            className={classNames(projectcss.all, sty.headerSection)}
          >
            <KoorongLogosvgIcon
              className={classNames(projectcss.all, sty.svg__uIbOm)}
              role={"img"}
            />
          </section>
          <section
            data-plasmic-name={"contentSection"}
            data-plasmic-override={overrides.contentSection}
            className={classNames(projectcss.all, sty.contentSection)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              <React.Fragment>
                <React.Fragment>{"We're currently "}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#E82E2E" }}
                >
                  {"upgrading"}
                </span>
                <React.Fragment>
                  {"\nour website and stores!\nStay tuned."}
                </React.Fragment>
              </React.Fragment>
            </h1>
            <p.Stack
              as={"div"}
              data-plasmic-name={"countdownWrapper"}
              data-plasmic-override={overrides.countdownWrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.countdownWrapper)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qbddL)}
                >
                  {false ? (
                    <Embed
                      className={classNames(
                        "__wab_instance",
                        sty.embedHtml__os6Qv
                      )}
                      code={
                        '<!-- Display the countdown timer in an element -->\n<p id="demo"></p>\n\n<script>\n// Set the date we\'re counting down to\nvar countDownDate = new Date("Aug 2, 2023 12:00:00").getTime();\n\n// Update the count down every 1 second\nvar x = setInterval(function() {\n\n  // Get today\'s date and time\n  var now = new Date().getTime();\n\n  // Find the distance between now and the count down date\n  var distance = countDownDate - now;\n\n  // Time calculations for days, hours, minutes and seconds\n  var days = Math.floor(distance / (1000 * 60 * 60 * 24));\n  var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n  var seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n  // Display the result in the element with id="demo"\n  document.getElementById("demo").innerHTML = days + "d " + hours + "h "\n  + minutes + "m " + seconds + "s ";\n\n  // If the count down is finished, write some text\n  if (distance < 0) {\n    clearInterval(x);\n    document.getElementById("demo").innerHTML = "EXPIRED";\n  }\n}, 1000);\n</script>' as const
                      }
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wxziH
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {"Check back at noon on "}
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700, color: "#E82E2E" }}
                      >
                        {"Wednesday 2 August"}
                      </span>
                      <React.Fragment>
                        {"\nto explore our new and improved "}
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Koorong.com"}
                      </span>
                      <React.Fragment>{" experience"}</React.Fragment>
                    </React.Fragment>
                  </div>
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml__ojRpw
                    )}
                    code={
                      '<table align="center">\n\n  <tbody>\n\n    <tr>\n\n      <td><img src="https://gen.sendtric.com/countdown/0a0qvvejwo" style="display: block;max-width:100%;" /></td>\n\n    </tr>\n\n  </tbody>\n\n</table>' as const
                    }
                  />
                </p.Stack>
              ) : null}
            </p.Stack>
            <div
              data-plasmic-name={"body"}
              data-plasmic-override={overrides.body}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.body
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 400 }}
                >
                  {
                    "Our website, stores, and systems are currently undergoing a major upgrade to enhance your shopping experience. We apologize for any inconvenience caused, but rest assured that these improvements will bring better performance, improved security, and exciting new features. "
                  }
                </span>
                <React.Fragment>{""}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700, color: "#E82E2E" }}
                >
                  {
                    "During the upgrade period, our website and stores will be temporarily closed and will reopen on Wednesday, August 2nd."
                  }
                </span>
                <React.Fragment>{"\n"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 400 }}
                >
                  {""}
                </span>
                <React.Fragment>{"\n"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 400 }}
                >
                  {
                    "Stay informed by subscribing below to receive updates on when our website and stores will be ready. Thank you for your patience, and we can't wait to welcome you back to our upgraded shopping experience!"
                  }
                </span>
              </React.Fragment>
            </div>
          </section>
          <section
            data-plasmic-name={"subSection"}
            data-plasmic-override={overrides.subSection}
            className={classNames(projectcss.all, sty.subSection)}
          >
            <h2
              data-plasmic-name={"h2"}
              data-plasmic-override={overrides.h2}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {"Subscribe for Updates \nand a "}
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#E82E2E" }}
                >
                  {"10% Discount! \n\n"}
                </span>
              </React.Fragment>
            </h2>
            <Embed
              className={classNames("__wab_instance", sty.embedHtml__bW7F)}
              code={
                '<body onload="preFill()">\n<form name="ProfileForm" onsubmit="return CheckInputs();" action="https://link.koorong.com/u/register.php" method=get>\n<input type=hidden name="CID" value="760094772"><input type=hidden name="SID" value=""><input type=hidden name="UID" value=""><input type=hidden name="f" value="1903"><input type=hidden name="p" value="2"><input type=hidden name="a" value="r"><input type=hidden name="el" value=""><input type=hidden name="llid" value=""><input type=hidden name="c" value=""><input type=hidden name="counted" value=""><input type=hidden name="RID" value=""><input type=hidden name="mailnow" value="">\n<input type=text class="input" placeholder="First name" name="inp_1" maxlength=60 value="">\n<input type=text class="input" placeholder="Last name" name="inp_2" maxlength=60 value=""><br>\n<input type=text class="input" placeholder="Email" name="inp_3" maxlength=255 value=""><br>\nMobile:<input type=text name="inp_37" maxlength=60 value=""><br>\n<input tabindex=\'882\' class="OptInBox" type=checkbox name="optin" value="y" >Yes, I would like to be notified of offers and updates from Koorong.<br>\nInterests:<br>\n<div class="interest-container">\n  <div class="interest-column">\n    <input type="checkbox" name="interest[]" value="1">Sales<br>\n    <input type="checkbox" name="interest[]" value="2">Store Updates<br>\n    <input type="checkbox" name="interest[]" value="3">Birthday Offer<br>\n    <input type="checkbox" name="interest[]" value="7">Christian Gifts<br>\n  </div>\n  <div class="interest-column">\n    <input type="checkbox" name="interest[]" value="4">New Releases & Highlights<br>\n    <input type="checkbox" name="interest[]" value="5">Christian Living<br>\n    <input type="checkbox" name="interest[]" value="6">Academic Resources<br>\n\n  </div>\n</div>\n<input aria-label=\'Submit\' class="submitButton" tabindex=\'993\' type=button onclick="javascript:SubmitIt()" name="submit1" value="Sign Up"></form>\n<script language="javascript">\n<!--\nfunction onbeforesubmit()\n{\nreturn true;\n}\n//-->\n</script>\n<script language="javascript">\n<!--\n\tvar error;\nvar form_lanuage = \'en\';\nfunction is_0_valid(){\n  count = 0;\n  if(document.ProfileForm.optin){\n    if(document.ProfileForm.optin.checked){\n      if(document.getElementsByName(\'interest[]\')){\n        if(document.getElementsByName(\'interest[]\').length > 0 ){\n          Interest = document.getElementsByName(\'interest[]\');\n          for(i = 0 ; i < Interest.length;i++){\n           if(Interest[i].checked)\n         ++count;\n }\n          if(count == 0){\n            error  += "Interests:";\n            return false;\n  }\n        }\n      }\n    }\n  }\n return  true;\n}\nfunction is_1_valid(input)\n{\n\tif(input == "")\n\t{\n\t\terror += "First Name: missing data!\\n";\n\t\treturn false;\n\t}\n\n\treturn true;\n}\nfunction is_2_valid(input)\n{\n\tif(input == "")\n\t{\n\t\terror += "Last Name: missing data!\\n";\n\t\treturn false;\n\t}\n\n\treturn true;\n}\nfunction is_3_valid(input)\n{\n\tif(input == "")\n\t{\n\t\terror += "Email: missing data!\\n";\n\t\treturn false;\n\t}\n\nvar emailPat=/^(.+)@(.+)$/\nvar specialChars="\\\\(\\\\)<>@,;:\\\\\\\\\\\\\\"\\\\.\\\\[\\\\]"\nvar validChars="\\[^\\\\s" + specialChars + "\\]"\nvar quotedUser="(\\"[^\\"]*\\")"\nvar ipDomainPat=/^\\[(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\]$/\nvar atom=validChars + \'+\'\nvar word="(" + atom + "|" + quotedUser + ")"\nvar userPat=new RegExp("^" + word + "(\\\\." + word + ")*$")\nvar domainPat=new RegExp("^" + atom + "(\\\\." + atom +")*$")\n\n\nvar matchArray=input.match(emailPat)\nif (matchArray==null) {\nerror += "E-Mail: Please enter a valid e-mail address!\\n"; // check @ and .\nreturn false\n}\nvar user=matchArray[1]\nvar domain=matchArray[2]\n\nif (user.match(userPat)==null) {\nerror += "E-Mail: Please enter a valid e-mail address!\\n"; // username doesn\'t seem to be valid\nreturn false\n}\n\nvar IPArray=domain.match(ipDomainPat)\nif (IPArray!=null) {\n  for (var i=1;i<=4;i++) {\n    if (IPArray[i]>255) {\nerror += "E-Mail: Please enter a valid e-mail address!\\n"; // Destination IP address is invalid\nreturn false\n    }\n    }\n    return true\n}\n\nvar domainArray=domain.match(domainPat)\nif (domainArray==null) {\nerror += "E-Mail: Please enter a valid e-mail address!\\n"; // The domain name doesn\'t seem to be valid\n   return false\n}\n\nvar atomPat=new RegExp(atom,"g")\nvar domArr=domain.match(atomPat)\nvar len=domArr.length\n\n\nif (len<2) {\nerror += "E-Mail: Please enter a valid e-mail address!\\n"; // This address is missing a hostname\nreturn false\n}\n\n\n\treturn true;\n}\nfunction is_37_valid(input)\n{\n\tif(input == "")\n\t{\n\t\terror += "Mobile: missing data!\\n";\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nfunction CheckInputs()\n{\n\tvar check_ok = true;\n\terror = "Wrong input!\\n";\n\n\tcheck_ok = (is_0_valid(\'null\') && check_ok);\n\tcheck_ok = (is_1_valid(document.ProfileForm.inp_1.value) && check_ok);\n\tcheck_ok = (is_2_valid(document.ProfileForm.inp_2.value) && check_ok);\n\tcheck_ok = (is_3_valid(document.ProfileForm.inp_3.value) && check_ok);\n\tcheck_ok = (is_37_valid(document.ProfileForm.inp_37.value) && check_ok);\n\tif(check_ok == false)\n\t\talert(error);\n\treturn check_ok;\n}\n//-->\n</script>\n\n\n<script language="javascript">\nfunction SubmitIt(){\n                if(CheckInputs() == true){\n                                if(window.onbeforesubmit)\n                                                onbeforesubmit();\n                                document.ProfileForm.submit();\n                }\n}\n\nfunction MailIt(){\n                if(CheckInputs()){\n                                if((document.ProfileForm.subject.value==\'\') || (document.ProfileForm.msg.value==\'\'))\n                                                alert(\'Bitte f\\u00fcr Sie die Nachrichtenfelder aus!\');\n                                else\n                                                document.ProfileForm.submit();\n    }\n}\n\nfunction FieldWithName(frm, fieldname, numofield)\n{\n    if(!numofield)\n        numofield = 0;\n    field_count = 0;\n    for(i = 0; i < frm.elements.length; ++i)\n    {\n        if(frm.elements[i].name == fieldname)\n        {\n            if(field_count == numofield)\n                return frm.elements[i];\n            else\n                field_count++;\n        }\n    }\n}\nfunction NumChecked(frm, fieldname)\n{\n\t\tvar count = 0;\n\t\tfor(i = 0; i < frm.elements.length; ++i)\n\t\t{\n\t\t\t\tif(frm.elements[i].name == fieldname && frm.elements[i].checked == true)\t\t\n\t\t\t\t\t\t++count;\n\t\t}\n\t\treturn count;\n}\nfunction NumSel(field)\n{\n    var count = 0;\n    for(i = 0; i < field.length; ++i)\n        if(field[i].selected == true) ++count;\n    return count;\n}\n</script>\n\n<script language="javascript">\nvar multiFields = new Array();\nvar dateFields = new Array();\nmultiFields["interest[]"] = "interest"\nmultiFields["optin"] = "optin"\nvar arr_optin = new Array();\narr_optin["True"] = "y";\nvar arr_interest = new Array();\narr_interest["Sales"] = "1";\narr_interest["Store Updates"] = "2";\narr_interest["Birthday Offer"] = "3";\narr_interest["New Releases & Highlights"] = "4";\narr_interest["Christian Living"] = "5";\narr_interest["Academic Resources"] = "6";\narr_interest["Christian Gifts"] = "7";\n</script>\n<script language="javascript" src="https://link.koorong.com/u/nprefill.js" type="text/javascript"></script>\n\n<style>\n  .input {\n    \tbackground: white;\n\tborder: 1px solid #cecece;\n\tborder-radius: 0px;\n\tbottom: 0px;\n\tbox-sizing: border-box;\n\tcolor: #f3f3f3;\n\tfont-family: inherit;\n\tfont-size: 16px;\n\tfont-weight: 400;\n\theight: 100%;\n\tleft: 0px;\n\tline-height: 20px;\n\tmargin: 0px;\n\toverflow: visible;\n\tpadding: 0.375rem 0.75rem;\n\tpadding-right: 2.25rem;\n\ttransition: border-color 0.15s ease-in-out 0s, box-shadow 0.15s ease-in-out 0s;\n  width:100%\n  }\n\n.submitButton {\n\tbackground-color: #3c8083;\n\tborder: 1px solid transparent;\n\tborder-radius: 0px;\n\tbottom: 0px;\n\tbox-sizing: border-box;\n\tcolor: #ffffff;\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tfont-family: Inter, -apple-system, "system-ui", "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\n\tfont-size: 1rem;\n\tfont-weight: 500;\n\tleft: 0px;\n\tline-height: 2.25;\n  margin-top: 10px;\n\tpadding-left: 20px;\n  padding-right: 20px;\n\tposition: relative;\n\tright: 0px;\n\ttext-align: center;\n\ttext-decoration: none;\n\ttop: 0px;\n\ttransition: color 0.15s ease-in-out 0s, background-color 0.15s ease-in-out 0s, border-color 0.15s ease-in-out 0s, box-shadow 0.15s ease-in-out 0s;\n\tuser-select: none;\n\tvertical-align: middle;\n\tz-index: 2;\n  width: 100%;\n}\n.submitButton:hover { \n\tbackground-color: #306669;\n\tborder-color: rgb(44, 94, 96);\n\tcolor: #ffffff;\n\ttext-decoration: none;\n}\n\n\n\n.interest-container {\n  display: flex;\n  width:100%;\n  font-size:12px\n}\n\n.interest-column {\n  flex: 1;\n}' as const
              }
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gKrAu
              )}
            >
              {
                "Subscribe now to receive the latest updates and\n a 10% discount once the website is back online! "
              }
            </div>
          </section>
          <section
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames(projectcss.all, sty.footer)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4GEsq
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Follow us:"}
                </span>
              </React.Fragment>
            </div>
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__eTqMv)}
              >
                <FacebooksvgIcon
                  className={classNames(projectcss.all, sty.svg__kOil1)}
                  role={"img"}
                />

                <InstagramsvgIcon
                  className={classNames(projectcss.all, sty.svg__sA5UM)}
                  role={"img"}
                />
              </p.Stack>
            ) : null}
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerSection",
    "contentSection",
    "h1",
    "countdownWrapper",
    "body",
    "subSection",
    "h2",
    "footer"
  ],
  headerSection: ["headerSection"],
  contentSection: ["contentSection", "h1", "countdownWrapper", "body"],
  h1: ["h1"],
  countdownWrapper: ["countdownWrapper"],
  body: ["body"],
  subSection: ["subSection", "h2"],
  h2: ["h2"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerSection: "section";
  contentSection: "section";
  h1: "h1";
  countdownWrapper: "div";
  body: "div";
  subSection: "section";
  h2: "h2";
  footer: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerSection: makeNodeComponent("headerSection"),
    contentSection: makeNodeComponent("contentSection"),
    h1: makeNodeComponent("h1"),
    countdownWrapper: makeNodeComponent("countdownWrapper"),
    body: makeNodeComponent("body"),
    subSection: makeNodeComponent("subSection"),
    h2: makeNodeComponent("h2"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
